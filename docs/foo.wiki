first row

== Level 1 header ==

Some stuff

== Level 2 header ==

A definition list

; Mockers
: This is the oldest library in our shootout.  Inspired by
GoogleMock, it has an elegant syntax, powerful sequence matching, and a rich
variety of helper methods.  It requires nightly Rust, and is very sensitive to
exact compiler versions.  Each release of Mockers typically only works with a
single version of rustc.
; Mock_Derive
: This was the first Rust mocking library that supported
automatically <code>derive</code>ing the Mock object from the target trait.
That saves a lot of typing!  Mock_Derive is still very easy to use, though it
lacks any ability to validate method arguments.  It also can't work with
generic traits, traits with generic methods, traits defined in external crates,
or multiple traits (like <code>T: A + B</code>).  However, it does have a few
rare features, like the ability to mock foreign free functions, or traits with
static methods.

A table

{| class="wikitable"
|+Feature Matrix
!colspan="4"|Essential Features
|-
|
| Double
| Galvanic-mock
| Mock_Derive
| -
| Associated types
| style="background:#EB9999;" |
| style="background:#ADEBAD;" |
| style="background:#ADEBAD;" | Cell stuff
|}

=== Level 3 header ===

A bullet list

* All of the libraries that run on stable Rust are more verbose than those that don't.  Mock-it is by far the most verbose, and Mock_Derive is the least.
* All of the libraries that run on stable Rust are also much easier to debug than those that don't.  Procedural macros can be very confusing when they fail to compile.  Galvanic-mock is probably the worst in this respect.
* Validating call sequences is an underappreciated aspect of mocking.  Only Mockers had full support for validating the sequences of multiple objects' methods.  However, Simulacrum's sequence syntax is more elegant.
* Mocking is complicated, and none of these libraries' authors anticipated every possible situation.  However, Mock-it and Simulacrum proved surprisingly versatile, since they allow the user relatively low-level access into the library itself.
* Simulacrum is the clear winner on features.  However, it also has pretty sparse documentation.
* Mock_Derive and Mockers are probably the easiest libraries to use.
